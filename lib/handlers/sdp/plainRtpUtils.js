const Logger = require('../../Logger');
const logger = new Logger('LPZ Client PlainRtpUtils');

/**
 * Extract plain RTP parameters from a SDP.
 *
 * @param {Object} sdpObject - SDP Object generated by sdp-transform.
 * @param {String} kind - Media type.
 *
 * @returns {Object} with ip (String), ipVersion (4 or 6 Number) and port (Number).
 */
exports.extractPlainRtpParameters = function({ sdpObject, kind })
{
	logger.debug('extractPlainRtpParameters, [sdpObject:%o, kind:%o]', sdpObject, kind);
	const mediaObject = (sdpObject.media || [])
		.find((m) => m.type === kind);

	logger.debug('extractPlainRtpParameters, [mediaObject:%o]', mediaObject);
	if (!mediaObject)
		throw new Error(`m=${kind} section not found`);

	const connectionObject = mediaObject.connection || sdpObject.connection;
	logger.debug('extractPlainRtpParameters, [connectionObject:%o]', connectionObject);

	logger.debug('extractPlainRtpParameters, return [ip:%o, ipVersion:%o, port:%o]', connectionObject.ip, connectionObject.version, mediaObject.port);
	return {
		ip        : connectionObject.ip,
		ipVersion : connectionObject.version,
		port      : mediaObject.port
	};
};

/**
 * Get RTP encodings.
 *
 * @param {Object} sdpObject - SDP Object generated by sdp-transform.
 * @param {String} kind - Media type.
 *
 * @returns {Array<RTCRtpEncodingParameters>}
 */
exports.getRtpEncodings = function({ sdpObject, kind })
{
	logger.debug('getRtpEncodings, [sdpObject:%o, kind:%o]', sdpObject, kind);
	const mediaObject = (sdpObject.media || [])
		.find((m) => m.type === kind);

	logger.debug('getRtpEncodings, [mediaObject:%o]', mediaObject);
	if (!mediaObject)
		throw new Error(`m=${kind} section not found`);

	const ssrcCnameLine = (mediaObject.ssrcs || [])[0];
	const ssrc = ssrcCnameLine ? ssrcCnameLine.id : null;

	logger.debug('getRtpEncodings, [ssrcCnameLine:%o, ssrc:%o]', ssrcCnameLine, ssrc);

	if (ssrc)
		return [ { ssrc } ];
	else
		return [];
};
